---
import { wpquery } from "../../lib/wordpress";
import BlogHero from "../../components/BlogHero.astro";
import BlogShares from "../../components/BlogShares.astro";
import BlogTitle from "../../components/BlogTitle.astro";
import Post from "../../layouts/Post.astro";

interface PostProps {
  title: string;
  dateGmt: string;
  excerpt: string;
  slug: string;
  content: string;
  tags: {
    nodes: {
      id: string;
      name: string;
    }[];
  };
  featuredImage: {
    node: {
      mediaItemUrl: string;
      altText: string;
    };
  } | null;
}

interface Props {
  post: PostProps;
}

// Helper function to get the first sentence of the content
const getFirstSentence = (content: string): string => {
  const match = content.match(/[^.!?]*[.!?]/);
  return match ? match[0] : "";
};

// API call to fetch the data
export async function getStaticPaths() {
  try {
    const data = await wpquery({
      query: `
        query GetPostExcerpts {
          posts {
            nodes {
              title
              dateGmt
              excerpt
              slug
              content
              tags {
                nodes {
                  id
                  name
                }
              }
              featuredImage {
                node {
                  mediaItemUrl
                  altText
                }
              }
            }
          }
        }
      `,
    });

    return (data.posts?.nodes || []).map((post: Partial<PostProps>) => ({
      params: { slug: post.slug || "unknown" },
      props: {
        post: {
          title: post.title || "Untitled",
          dateGmt: post.dateGmt || new Date().toISOString(),
          excerpt: post.excerpt || getFirstSentence(post.content || ""),
          slug: post.slug || "unknown",
          content: post.content || "",
          tags: post.tags || { nodes: [] },
          featuredImage: post.featuredImage || null,
        },
      },
    }));
  } catch (error) {
    console.error("Error fetching posts:", error);
    return []; // Return an empty array if the query fails
  }
}

const { post } = Astro.props;
const fallbackImageUrl = "/src/images/adam_hedge.webp";
---

<Post
  title={post.title}
  description={post.excerpt}
  ogImage={post.featuredImage?.node.mediaItemUrl || fallbackImageUrl}
>
  <Fragment class="flex flex-col mx-auto">
    {
      post.featuredImage && (
        <BlogHero
          src={post.featuredImage.node.mediaItemUrl}
          alt={post.featuredImage.node.altText || ""}
        />
      )
    }

    <div
      class="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0"
    >
      <div class="w-full md:w-1/5 flex justify-center md:justify-start">
        <BlogShares url={Astro.url.toString()} />
      </div>

      <div class="w-full md:w-3/5 text-center">
        <BlogTitle
          date={post.dateGmt}
          title={post.title}
          tags={post.tags.nodes}
        />
      </div>
      <div class="hidden sm:block md:w-1/5"></div>
    </div>

    <div
      class="max-w-[100ch] dark:text-white prose dark:prose-invert prose-img:rounded prose-img:mx-auto prose-img:w-full prose-img:max-w-full md:prose-img:max-w-[80%] lg:prose-img:max-w-[70%] prose-img:block prose-figcaption:text-center"
      set:html={post.content}
    />
  </Fragment>
</Post>
