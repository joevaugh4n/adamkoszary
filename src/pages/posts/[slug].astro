---
import Post from "../../layouts/Post.astro";
import Tag from "../../components/atoms/Tag.astro";
import HR from "../../components/atoms/HR.astro";
import { wpquery } from "../../lib/wordpress";
import { Picture } from "astro:assets";

interface PostProps {
  title: string;
  dateGmt: string;
  excerpt: string;
  slug: string;
  content: string;
  tags: {
    nodes: {
      id: string;
      name: string;
    }[];
  };
  featuredImage: {
    node: {
      mediaItemUrl: string;
      altText: string;
    };
  } | null;
}

interface Props {
  post: PostProps;
}

function formatDate(date: string) {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  }).format(new Date(date));
}

// API call to fetch the data
export async function getStaticPaths() {
  try {
    const data = await wpquery({
      query: `
        query GetPostExcerpts {
          posts {
            nodes {
              title
              dateGmt
              excerpt
              slug
              content
              tags {
                nodes {
                  id
                  name
                }
              }
              featuredImage {
                node {
                  mediaItemUrl
                  altText
                }
              }
            }
          }
        }
      `,
    });

    return (data.posts?.nodes || []).map((post: Partial<PostProps>) => ({
      params: { slug: post.slug || "unknown" },
      props: {
        post: {
          title: post.title || "Untitled",
          dateGmt: post.dateGmt || new Date().toISOString(),
          excerpt: post.excerpt || "",
          slug: post.slug || "unknown",
          content: post.content || "",
          tags: post.tags || { nodes: [] },
          featuredImage: post.featuredImage || null,
        },
      },
    }));
  } catch (error) {
    console.error("Error fetching posts:", error);
    return []; // Return an empty array if the query fails
  }
}

const { post } = Astro.props;
---

<Post title={post.title} description={post.excerpt}>
  <article>
    {
      post.featuredImage && post.featuredImage.node && (
        <div class="h-[400px] overflow-hidden mb-8 rounded ">
          <Picture
            loading="eager"
            src={post.featuredImage.node.mediaItemUrl}
            alt={post.featuredImage.node.altText || ""}
            height="200"
            width="1000"
            class="object-cover"
          />
        </div>
      )
    }

    <hgroup>
      <p class="text-gray-600 dark:text-white mb-4">
        {formatDate(post.dateGmt)}
      </p>

      <h1 class="text-4xl uppercase mb-4">{post.title}</h1>

      <div class="mb-6 flex gap-2 flex-wrap">
        {post.tags.nodes.map((tag) => <Tag link tag={tag.name} />)}
      </div>
    </hgroup>

    <div
      class="dark:text-white prose dark:prose-invert prose-img:rounded prose-img:mx-auto prose-img:w-full prose-img:max-w-full md:prose-img:max-w-[80%] lg:prose-img:max-w-[70%] prose-img:block"
      set:html={post.content}
    />
  </article>
</Post>
