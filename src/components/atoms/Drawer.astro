---
export interface Props {
    title: string;
}

const { title } = Astro.props;
---

<section class="drawer">
    <button
        class="drawer-button p-4 text-pretty rounded-lg w-full font-mono bg-slate-200 text-black hover:bg-black hover:text-white dark:hover:bg-slate-500 tracking-tight transition-all duration-300 ease-in-out"
        aria-expanded="false"
    >
        <h2 class="flex justify-between text-left">
            {title}
            <svg
                class="w-5 h-5 transition-transform duration-300"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"></path>
            </svg>
        </h2>
    </button>
    <div
        class="drawer-content overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"
    >
        <div class="prose dark:text-white p-2 prose-img:mb-2 text-pretty">
            <slot />
        </div>
    </div>
</section>

<script>
    function setupDrawer(drawer: any) {
        const button = drawer.querySelector(".drawer-button");
        const content = drawer.querySelector(".drawer-content");
        const svg = button.querySelector("svg");

        button.addEventListener("click", () => {
            const isOpen = button.getAttribute("aria-expanded") === "true";
            button.setAttribute("aria-expanded", (!isOpen).toString());
            button.classList.toggle("drawer-open");
            svg.classList.toggle("rotate-180");

            if (isOpen) {
                content.style.maxHeight = "0";
                content.style.opacity = "0";
            } else {
                content.style.maxHeight = `${content.scrollHeight}px`;
                content.style.opacity = "1";
            }
        });

        button.addEventListener("touchstart", () => {
            button.style.setProperty("--touch-scale", "0.98");
            button.style.setProperty("--touch-brightness", "0.95");
        });

        button.addEventListener("touchend", () => {
            button.style.setProperty("--touch-scale", "1");
            button.style.setProperty("--touch-brightness", "1");
        });
    }

    document.querySelectorAll(".drawer").forEach(setupDrawer);
</script>

<style>
    .drawer-button {
        --touch-scale: 1;
        --touch-brightness: 1;
        transform: scale(var(--touch-scale));
        filter: brightness(var(--touch-brightness));
    }

    .drawer-open {
        background-color: black;
        color: white;
    }

    :global(.dark) .drawer-open {
        background-color: #64748b; /* slate-500 */
    }
</style>
